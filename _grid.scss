$debug: false !default;
$grid-columns:      12 !default;
$include-css-grids: true !default;
$class-prefix: '' !default;
$native-class-prefix: '.cssgrid ' !default;

$grid-breakpoints-iterate: ();

$grid-breakpoints: (
	xs: 0,
	sm: 576px,
	md: 768px,
	lg: 992px,
	xl: 1200px,
) !default;

$grid-gutter-widths: (
	xs: 10px,
	sm: 10px,
	md: 20px,
	lg: 30px,
	xl: 30px,
) !default;

$grid-max-widths: (
	xs: none,
	sm: 540px,
	md: 720px,
	lg: 960px,
	xl: 1140px,
) !default;

$neat-grids: (
	xs: (
		columns: $grid-columns,
		gutter: map-get($grid-gutter-widths, xs),
		media: 0px
	),
	sm: (
		columns: $grid-columns,
		gutter: map-get($grid-gutter-widths, sm),
		media: 540px
	),
	md: (
		columns: $grid-columns,
		gutter: map-get($grid-gutter-widths, md),
		media: 720px
	),
	lg: (
		columns: $grid-columns,
		gutter: map-get($grid-gutter-widths, lg),
		media: 960px
	),
	xl: (
		columns: $grid-columns,
		gutter: map-get($grid-gutter-widths, xl),
		media: 1140px
	)
) !default;

/* @each $grid-breakpoint, $grid-breakpoint-min-width in $grid-breakpoints {
	@media (min-width: $grid-breakpoint-min-width) {
		.container {
			grid-template-columns: repeat($grid-columns, 1fr);
			display: grid;
			grid-column-gap: map-get($grid-gutter-widths, $grid-breakpoint);
		}
	}
} */

@if $include-css-grids == true {
	$class-prefix: '.no-cssgrid ';
	
	#{$native-class-prefix}.container {
		width: 100%;
		margin-right: auto;
		margin-left: auto;
	}
	
	@for $i from 1 through $grid-columns {
		#{$native-class-prefix}.col-#{$i} {
			grid-column: auto / span $i;
		}
	}
	
	#{$native-class-prefix}.container .row {
		grid-column: auto / span $grid-columns;
	}
	
	@each $grid-breakpoint-outer, $grid-breakpoint-min-width in $grid-breakpoints {
		$grid-breakpoints-iterate: append($grid-breakpoints-iterate, $grid-breakpoint-outer);
		@media (min-width: $grid-breakpoint-min-width) {
			#{$native-class-prefix}.container {
				display: grid;
				grid-template-columns: repeat($grid-columns, 1fr);
				grid-column-gap: map-get($grid-gutter-widths, $grid-breakpoint-outer);
				max-width: map-get($grid-max-widths, $grid-breakpoint-outer);
				.row {
					display: grid;
					grid-template-columns: repeat($grid-columns, 1fr);
					grid-column-gap: map-get($grid-gutter-widths, $grid-breakpoint-outer);
					grid-column: auto / span $grid-columns;
				}
			}
			@each $grid-breakpoint-inner, $grid-breakpoint-width in $grid-breakpoints-iterate {
				@for $i from 1 through $grid-columns {
					#{$native-class-prefix}.col-#{$grid-breakpoint-inner}-#{$i} {
						grid-column: auto / span $i;
					}
				}
			}
		}
	}
}

/* Neat grid (https://neat.bourbon.io/). Use optional no-cssgrid prefix as HTML/body class for older browsers and native CSS grids for browsers with full support. */

#{$class-prefix}.container {
	@include grid-container;
	width: 100%;
	margin-right: auto;
	margin-left: auto;
}

@for $i from 1 through $grid-columns {
	#{$class-prefix}.col-#{$i} {
		@include grid-column($i);
	}
}

$grid-breakpoints-iterate: ();

@each $grid-breakpoint-outer, $grid-breakpoint-min-width in $grid-breakpoints {
	$grid-breakpoints-iterate: append($grid-breakpoints-iterate, $grid-breakpoint-outer);
	@media (min-width: $grid-breakpoint-min-width) {
		#{$class-prefix}.container {
			max-width: map-get($grid-max-widths, $grid-breakpoint-outer);
			@if $debug == true {
				@include grid-visual(rgba(255, 0, 0, 0.2), map-get($neat-grids, $grid-breakpoint-outer));
			}
		}
		@if $grid-breakpoint-outer != 'xs' {
			#{$class-prefix}.row {
				@include grid-collapse(map-get($neat-grids, $grid-breakpoint-outer));
			}
		}
		@each $grid-breakpoint-inner, $grid-breakpoint-width in $grid-breakpoints-iterate {
			@for $i from 1 through $grid-columns {
				#{$class-prefix}.col-#{$grid-breakpoint-inner}-#{$i} {
					@include grid-column($i, map-get($neat-grids, $grid-breakpoint-outer) );
				}
			}
		}
	}
}
